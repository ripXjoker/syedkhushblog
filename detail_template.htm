<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Project Detail</title> <!-- This will be changed per page -->
    <link rel="stylesheet" href="style.css"> <!-- Link to your main stylesheet -->
    <link rel="stylesheet" href="detail-page.css"> <!-- Optional: Specific styles for detail pages -->
</head>
<body>
    <div id="background-image-container">
      <img id="detail-background-image" crossorigin="anonymous" alt="Project background">
    </div>

    <div class="detail-container">
        <a href="index.html" class="back-button">‚Üê Back to Projects</a>
        <h1 id="detail-title">Project Title</h1> <!-- JS will set this if needed, or set manually -->
        <div id="detail-content">
            <!--
                ADD YOUR DETAILED CONTENT FOR THIS SPECIFIC PROJECT HERE.
                For example:
                <h2>About Silence</h2>
                <p>This project explores the concept of silence in a noisy world...</p>
                <p>Further details and musings...</p>
            -->
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const backgroundImageElement = document.getElementById('detail-background-image');
            const detailTitleElement = document.getElementById('detail-title');
            const detailContentElement = document.getElementById('detail-content'); // To potentially populate

            const params = new URLSearchParams(window.location.search);
            const imageUrl = params.get('image');
            // Optional: If you also pass title in URL, you can get it:
            // const projectTitle = params.get('title') || "Project Detail";

            if (imageUrl) {
                backgroundImageElement.src = decodeURIComponent(imageUrl);
                backgroundImageElement.style.opacity = '0'; // Start transparent
                // Simple fade-in, similar to main page's hover logic if desired
                setTimeout(() => {
                    backgroundImageElement.style.transition = 'opacity 0.8s ease-in-out';
                    backgroundImageElement.style.opacity = '1';
                }, 100); // Small delay to ensure src is set
            } else {
                console.error('Image URL not found in query parameters.');
                // Handle missing image, maybe show a default or hide the element
            }

            // --- To make it truly dynamic based on the page filename (e.g., silence.html) ---
            // Extract project name from URL path
            const pathParts = window.location.pathname.split('/');
            const fileName = pathParts[pathParts.length - 1];
            const projectNameFromUrl = fileName.substring(0, fileName.lastIndexOf('.')); // e.g., "silence"

            // Find project data (you might need to make 'projects' array accessible globally or pass more data)
            // For simplicity, we'll just set the title based on the filename.
            // A more robust way would be to have the projects array available here.
            if (projectNameFromUrl && detailTitleElement) {
                const formattedTitle = projectNameFromUrl.charAt(0).toUpperCase() + projectNameFromUrl.slice(1);
                detailTitleElement.textContent = formattedTitle;
                document.title = formattedTitle + " - Project Detail"; // Update browser tab title

                // Example: Dynamically load content based on projectNameFromUrl (more advanced)
                // if (projectNameFromUrl === 'silence') {
                //     detailContentElement.innerHTML = `<h2>About Silence</h2><p>Content for silence...</p>`;
                // } else if (projectNameFromUrl === 'resonance') {
                //     detailContentElement.innerHTML = `<h2>About Resonance</h2><p>Content for resonance...</p>`;
                // }
                // For now, you'll hardcode content in each HTML file.
            }
        });
    </script>
</body>
</html>
