/* Original CSS provided by the user (subset for scrollbars, selection) */
::-webkit-scrollbar {
  width: 0.625rem;
  height: 0.625rem;
}
::-webkit-scrollbar-thumb {
  background: #111;
  border-radius: 0.3125rem;
  box-shadow: inset 0.125rem 0.125rem 0.125rem rgba(255, 255, 255, 0.25),
    inset -0.125rem -0.125rem 0.125rem rgba(0, 0, 0, 0.25);
  cursor: default;
}
::-webkit-scrollbar-track {
  background: #333;
}
::selection {
  background: #fff;
  color: #333;
}

/* Basic reset and full-screen setup */
html,
body {
  height: 100vh;
  width: 100vw;
  margin: 0;
  overflow: hidden;
  font-family: system-ui, sans-serif;
  background-color: black; /* Fallback background */
}

/* Canvas styling for full-screen background animation */
canvas {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover; /* Cover entire screen, may crop edges */
  background: black; /* Fallback if shader doesn't load */
  touch-action: none; /* Disable touch actions like pinch-zoom on canvas */
  z-index: 0; /* Behind the center box */
}

/* Styles for the central "LET'S BEGIN" box */
#centerBox {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%); /* Center the box */
    background-color: rgba(20, 20, 20, 0.85); /* Dark, semi-transparent background */
    color: #e0e0e0; /* Light grey text color */
    padding: 30px 60px;
    border-radius: 15px;
    text-align: center;
    z-index: 10; /* Ensure it's above the canvas */
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; /* Clean font */
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.6); /* Subtle shadow */
    border: 1px solid rgba(255, 255, 255, 0.05); /* Faint border */
}

#centerBox h1 {
    margin: 0;
    font-size: 2.8rem; /* Adjust size as needed */
    font-weight: 300; /* Lighter font weight for a modern look */
    letter-spacing: 1.5px;
}

/* Hide original CodePen UI elements that are not needed for this landing page */
#codeEditor,
#error,
#indicator,
#controls,
.overlay { /* .overlay is dynamically added by JS for errors */
  display: none !important;
}

/* The rest of the original CSS - mostly affects hidden elements but kept for completeness */
/* If these elements were visible, these styles would apply. */
.editor,
.overlay, /* This specific .overlay is handled above with display:none */
#error {
  /* background: repeating-linear-gradient(0deg, #000a, #1119, #000a .25rem); */
  padding: 1em;
}
.editor {
  color: #fefefe;
  tab-size: 2;
  border: none;
  resize: none;
}
.editor:focus {
  outline: none;
}
.controls {
  /* Styles for the hidden controls container */
  position: relative;
  display: flex;
  gap: 1.5em;
  padding: .5em 1.25em;
  background: #1111;
  border-radius: 4px;
}
.controls::before,
.controls::after {
  content: '';
  position: absolute;
  z-index: -1;
  inset: 0;
  transform: scale(.95);
  border-radius: inherit;
  opacity: 0;
}
.controls::before {
  background: #aef;
  animation: pulse 2s infinite;
}
.controls::after {
  background: #fefefe66;
  transition: transform 200ms ease-in-out;
}
.controls:hover::before,
.controls:hover::after {
  opacity: 1;
}
.controls:hover::before {
  transform: scale(.98);
  filter: blur(2px);
}
.controls:hover::after {
  transform: scale(1.025, 1.1);
}
.controls:hover {
  background: #111f;
}
@keyframes pulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.0125); }
  100% { transform: scale(1); }
}
/* .hidden class is used by JS. Our !important on IDs will override this for the specific elements */
.hidden {
  /* display: none !important; */
}
.opaque { /* For error messages, which are hidden */
  opacity: 1 !important;
  /* background: #111 !important; */
}
input { /* For inputs inside #controls, which are hidden */
  all: unset;
  opacity: .2;
  filter: saturate(0) invert(1);
  cursor: pointer;
  transition: opacity 200ms ease-in-out;
  padding: .25em .5em;
}
input:hover {
  opacity: 1;
}
.icon { /* For icons inside #controls, which are hidden */
  text-align: center;
  line-height: 1;
}
#btnToggleView { width: 1.25em; }
#btnToggleView::after { content: 'üëÅ'; }
#btnToggleView:checked::after { content: '‚úèÔ∏è'; }
#btnToggleResolution::after { content: '1Ô∏è‚É£'; }
#btnToggleResolution:checked::after { content: '2Ô∏è‚É£'; }
#btnReset::after { content: '‚èÆÔ∏è'; }